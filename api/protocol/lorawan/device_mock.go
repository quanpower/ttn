// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./api/protocol/lorawan/device.pb.go

package lorawan

import (
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Mock of DeviceManagerClient interface
type MockDeviceManagerClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDeviceManagerClientRecorder
}

// Recorder for MockDeviceManagerClient (not exported)
type _MockDeviceManagerClientRecorder struct {
	mock *MockDeviceManagerClient
}

func NewMockDeviceManagerClient(ctrl *gomock.Controller) *MockDeviceManagerClient {
	mock := &MockDeviceManagerClient{ctrl: ctrl}
	mock.recorder = &_MockDeviceManagerClientRecorder{mock}
	return mock
}

func (_m *MockDeviceManagerClient) EXPECT() *_MockDeviceManagerClientRecorder {
	return _m.recorder
}

func (_m *MockDeviceManagerClient) GetDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*Device, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetDevice", _s...)
	ret0, _ := ret[0].(*Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceManagerClientRecorder) GetDevice(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDevice", _s...)
}

func (_m *MockDeviceManagerClient) SetDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*empty.Empty, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SetDevice", _s...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceManagerClientRecorder) SetDevice(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDevice", _s...)
}

func (_m *MockDeviceManagerClient) DeleteDevice(ctx context.Context, in *DeviceIdentifier, opts ...grpc.CallOption) (*empty.Empty, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteDevice", _s...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceManagerClientRecorder) DeleteDevice(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDevice", _s...)
}

// Mock of DeviceManagerServer interface
type MockDeviceManagerServer struct {
	ctrl     *gomock.Controller
	recorder *_MockDeviceManagerServerRecorder
}

// Recorder for MockDeviceManagerServer (not exported)
type _MockDeviceManagerServerRecorder struct {
	mock *MockDeviceManagerServer
}

func NewMockDeviceManagerServer(ctrl *gomock.Controller) *MockDeviceManagerServer {
	mock := &MockDeviceManagerServer{ctrl: ctrl}
	mock.recorder = &_MockDeviceManagerServerRecorder{mock}
	return mock
}

func (_m *MockDeviceManagerServer) EXPECT() *_MockDeviceManagerServerRecorder {
	return _m.recorder
}

func (_m *MockDeviceManagerServer) GetDevice(_param0 context.Context, _param1 *DeviceIdentifier) (*Device, error) {
	ret := _m.ctrl.Call(_m, "GetDevice", _param0, _param1)
	ret0, _ := ret[0].(*Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceManagerServerRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDevice", arg0, arg1)
}

func (_m *MockDeviceManagerServer) SetDevice(_param0 context.Context, _param1 *Device) (*empty.Empty, error) {
	ret := _m.ctrl.Call(_m, "SetDevice", _param0, _param1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceManagerServerRecorder) SetDevice(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDevice", arg0, arg1)
}

func (_m *MockDeviceManagerServer) DeleteDevice(_param0 context.Context, _param1 *DeviceIdentifier) (*empty.Empty, error) {
	ret := _m.ctrl.Call(_m, "DeleteDevice", _param0, _param1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeviceManagerServerRecorder) DeleteDevice(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDevice", arg0, arg1)
}
